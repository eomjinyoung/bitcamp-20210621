<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    
    <context:component-scan base-package="step25.ex10"/>
    
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="dataSource" />
      <property name="mapperLocations" 
                value="classpath*:step25/ex10/*Mapper.xml" />  
      <property name="typeAliases" 
                value="step25.ex10.Board"/>   
    </bean>
    
    <bean id="dataSource" 
          class="org.apache.commons.dbcp.BasicDataSource" 
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    
    <!-- 트랜잭션 관리자 등록
         => 트랜잭션 관리자는 DataSource가 SqlSessionFactory에게 빌려주는 
            DB 커넥션을 관리해 줄 것이다.
         => 즉 같은 트랜잭션일 경우 같은 커넥션 객체를 사용하도록 관리한다.
         => 같은 커넥션을 사용하여 수행한 작업은 같은 단위로 묶이게 된다.
         => 왜? commit과 rollback은 커텍션 단위로 동작하기 때문이다.
         => DBMS 서버 입장에서는 같은 커넥션은 같은 클라이언트이다. 
    -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"/>
	</bean>
    
    <context:property-placeholder 
        location="classpath:step25/ex10/jdbc.properties"/> 
        
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="step25.ex10" />
    </bean>
    
    <!-- @Transactional 애노케이션을 처리할 객체 등록
         => 만약 트랜잭션 관리자 객체의 이름이 "transactionManager"라면
            transaction-manager 속성 생략할 수 있다. 
    -->
    <tx:annotation-driven transaction-manager="txManager"/>  
</beans>







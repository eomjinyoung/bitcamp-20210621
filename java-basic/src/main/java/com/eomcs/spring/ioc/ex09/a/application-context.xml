<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
    <!-- 애노테이션을 처리할 도우미 객체를 등록한다. -->
    <context:annotation-config/>
    
    <!-- 객체를 생성하기 위해 bean 태그를 사용하지 않고도
         객체를 자동 생성할 수 있다.
         방법은?
         클래스 선언에 @Component 애노테이션을 붙이는 것이다.
         단 이 애노테이션을 처리할 객체를 등록해야 한다.
    -->
    <!-- component-scan 태그는 @Component, @Service, @Repository, @Controller 
         애노테이션이 붙은 클래스를 찾아서 객체를 자동 생성시키도록 명령한다.
       => base-package 속성 
          어느 패키지의 클래스를 등록할 것인지 지정하는 속성이다.
       => @Component : 일반 클래스에 대해 붙인다.
       => @Repository : DAO 역할을 수행하는 클래스에 대해 붙인다.
       => @Service : 비즈니스 로직을 수행하는 클래스에 대해 붙인다.
       => @Controller : MVC 구조에서 컨트롤러 역할을 하는 클래스에 대해 붙인다.
       => @RestController : MVC 구조에서 REST API 컨트롤러 역할을 하는 클래스에 대해 붙인다.
       이렇게 역할에 따라 애노테이션으로 클래스를 분류해두면 나중에 통제하기가 편하다. 
    -->
     
    <context:component-scan base-package="com.eomcs.spring.ioc.ex09"/>
   

</beans>







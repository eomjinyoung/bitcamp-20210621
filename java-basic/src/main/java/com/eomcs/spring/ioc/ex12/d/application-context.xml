<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    
    <context:component-scan base-package="com.eomcs.spring.ioc.ex12.d"/>

    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="dataSource" />
      <property name="mapperLocations" 
                value="classpath*:com/eomcs/spring/ioc/ex12/d/*Mapper.xml" />  
      
      <!-- 도메인 클래스의 패키지를 지정한다.
           그러면 해당 패키지의 전체 클래스에 대해 별명이 부여된다. -->
      <!--  
      <property name="typeAliasesPackage" 
                value="com.eomcs.spring.ioc.ex12"/>
      -->
      
      <!-- 도메인 클래스를 낱개로 지정할 때는 
          다음의 프로퍼티를 설정한다. -->   
      <property name="typeAliases" 
                value="com.eomcs.spring.ioc.ex12.Board"/>
    </bean>
    
	<bean id="dataSource" 
	      class="org.apache.commons.dbcp.BasicDataSource" 
	      destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driver}" />
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	</bean>
	
    <context:property-placeholder 
        location="com/eomcs/spring/ioc/ex12/jdbc.properties"/>	
        
<!-- DAO 구현체를 자동으로 만들어 주는 객체를 준비
     => 개발자는 DAO를 직접 구현할 필요가 없다.
     => 단지 인터페이스만 선언하면 된다.
 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- DAO 인터페이스가 선언된 패키지를 지정한다. -->
    <property name="basePackage" 
              value="com.eomcs.spring.ioc.ex12.d" />
    <!-- DAO 인터페이스의 구현체를 자동으로 생성되게 하려면 
         다음의 규칙에 따라 인터페이스와 SQL 맵퍼 파일을 작성해야 한다.
         1) 인터페이스 작성 규칙
            - 메서드명은 SQL 맵퍼 파일의 SQL ID와 일치해야 한다.
            - 메서드의 파라미터 개수와 타입은 SQL 맵퍼 파일의 SQL 문과 일치해야 한다. 
              즉 0개 또는 한 개여야 한다.
            - 메서드의 리턴 타입은 
              => insert/update/delete 인 경우, void 또는 int로 설정하면 된다.
              => select 인 경우, List 또는 SQL 문의 리턴 타입과 같으면 된다.
         2) SQL 맵퍼 작성 규칙
            - namespace 속성의 값은 인터페이스의 전체 이름과 일치해야 한다.
            - SQL ID는 인터페이스의 메서드 이름과 같아야 한다.
            - SQL 문의 parameterType은 메서드의 파라미터 타입과 일치해야 한다.
            - SQL 문의 resultType은 메서드의 리턴 타입과 일치해야 한다.
              단 void 일 경우 상관없다.-->
  </bean>    
</beans>






